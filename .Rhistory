if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcome %in% outcome) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, state == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad,]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
desired_hosp
}
}
best("TX", "heart attack")
best2("TX", "heart attach")
best2("TX", "heart attack")
best("MD", "heart attack")
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- data[, 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcome %in% outcome) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, state == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad,]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
as.character(desired_hosp)
}
}
best("TX", "heart attack")
names(outcome)
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- data[, 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcome %in% outcome) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, state == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad,]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
desired_hosp
}
}
best("TX", "heart attack")
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- data[, 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcomes %in% outcome) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, state == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad,]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
desired_hosp
}
}
best("TX", "heart attack")
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- data[, 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcome %in% outcomes) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, state == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad,]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
desired_hosp
}
}
best("TX", "heart attack")
best("MD", "pneumonia")
best("BB", "dildo")
best("TX", "heart attack")
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv")
states <- data[, 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcome %in% outcomes) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, state == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad,]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
desired_hosp
}
}
best("TX", "heart attack")
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- data[, 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcome %in% outcomes) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, state == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad,]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
desired_hosp
}
}
best("PA", "heart attack")
best2("TX", "heart attack")
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- data[, 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if((outcome %in% outcomes) == FALSE){
stop(print("invalid outcome"))
}
data2 <- subset(data, State == state)
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure") {
outcome_col <- 17
}
else if (outcome == "pneumonia"){
outcome_col <- 23
}
required_columns <- as.numeric(data2[, outcome_col])
bad <- is.na(required_columns)
desired_data <- data2[!bad, ]
column_considered <- as.numeric(desired_data[, outcome_col])
desired_row <- which(outcome_col == min(column_considered))
desired_hosp <- desired_data[desired_row, 2]
if (length(desired_hosp) > 1) {
hospitals_sorted <- sort(desired_hosp)
hospitals_sorted[1]
}
else {
desired_hosp
}
}
best("TX", "heart attack")
best2("SC", "heart attack")
best("NY", "pnuemonia")
best2("NY", "pneumonia")
best2("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
source("best.R")
source("sortHospitalsByOutcome.R")
if (num=="best") {
best(state, outcome)
} else if (num=="worst") {
tail(sortHospitalsByOutcome(state, outcome), 1)
} else {
sortHospitalsByOutcome(state, outcome)[num]
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
full_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
data_for_state <- full_data[full_data$State == state, c("Hospital.Name", column)]
if (nrow(data_for_state) == 0) {
stop("invalid state")
}
data_for_state[,2] <- as.numeric(data_for_state[,2])
ordered_data_for_state <- order(data_for_state[column], data_for_state$Hospital.Name, na.last=NA)
if (num == "best") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[1]])
} else if (num == "worst") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[length(ordered_data_for_state)]])
} else if (is.numeric(num)) {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[num]])
} else {
stop("invalid num")
}
}
rankhospital <- function(state, outcome, num = "best") {
full_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
data_for_state <- full_data[full_data$State == state, c("Hospital.Name", column)]
if (nrow(data_for_state) == 0) {
stop("invalid state")
}
data_for_state[,2] <- as.numeric(data_for_state[,2])
ordered_data_for_state <- order(data_for_state[column], data_for_state$Hospital.Name, na.last=NA)
if (num == "best") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[1]])
} else if (num == "worst") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[length(ordered_data_for_state)]])
} else if (is.numeric(num)) {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[num]])
} else {
stop("invalid num")
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4) as.character(subset(r, state == "HI")$hospital)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num="best") {
outcome.names <- c("heart attack", "heart failure", "pneumonia")
# check validity of outcome
if (!outcome %in% outcome.names) {
stop("invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# rename outcome columns for easy reference
names(data)[c(11,17,23)] <- outcome.names
# take just the columns we need, convert outcome column to numeric
data <- data[,c("State","Hospital.Name",outcome)]
data[,outcome] <- suppressWarnings(as.numeric(data[,outcome]))
# get rid of rows where outcome is na
data <- data[!is.na(data[outcome]),]
# sort data by state name, then outcome, then hospital name
data <- data[order(data$State, data[outcome], data$Hospital.Name),]
# aggregate by state, choosing the row that corresponds to the rank num
ranksbystate <- aggregate(data, by=list(data$State), function(x) {
if (!is.numeric(num)) {
if (num == "best") {
num <- 1
} else if (num == "worst") {
num <- length(x)
} else {
stop("invalid num")
}
}
x[num]
})
# get just the columns we need and rename them
out <- ranksbystate[,c(3,1)]
names(out) <- c("hospital","state")
return(out)
}
head(rankall("heart attack", 20), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
sqrt(729)
b <- 1947.0.
b <- c(1947.0)
b
as.character(b)
library(datasets)
mtscars
head(mtcars)
librbary(plyr)
library(plyr)
library("plyr")
arranged_data <- arrange(mtcars, hp, gear)
library("plyr")
list.packages()
?packages
?help.search(list available packages)
?help(plyr)
?help(package)
library(plyr)
mtcars[ , hp, gears]
mtcars[, 4, 5]
colnames(mtcars)
head(mtcars)
head(mtcars$gear)
str(mtcars)
mtcars
setwd("~/Desktop/Coursera/Programming_R/my_project")
list.files()
tca_data <- read.csv("TCA_2016.csv")
head(tca_data)
tca_data[, 1]
class(tca_data[,1])
colnames(tca_data[,1])
colnames(tca_data)
as.character(colnames(tca_data[,1]))
bestday <- function(x)
{
# read the csv file in question
tca16 <- read.csv(x)
}
bestday("TCA_2016.csv")
str(bestday)
tca16
bestday <- function(x)
{
# read the csv file in question
tca16 <- read.csv(x)
head(tca16)
}
bestday("TCA_2016.csv")
head("TCA_2016.csv")
list.files()
x <- read.csv("TCA_2016.csv")
head(x)
ls(0)
ls()
head(tca_data)
tca_data <- read.csv("TCA_2016.csv")
head(tca_data)
tca_data <- read.csv("TCA_2016.csv")
head(tca_data)
?which
library(dplyr)
library("dplyr")
.libPaths()
packages()
library()
install.packages("dplyr")
library()
library(dplyr)
nrow(tca_data)
nrow(tca_data[, 1 = 1/1/16])
?ddply
??ddply
ddply(1)
?greatest
bestday("TCA_2016.csv")
